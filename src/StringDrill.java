import java.util.Arrays;

/**
 * üß† Java String Methods Drill Sheet
 *
 * –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∞:
 * –í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –≤—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫,
 * –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ API.
 *
 * üéØ –¶–µ–ª—å:
 * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–∑–æ–≤—ã–µ String-–º–µ—Ç–æ–¥—ã Java.
 */
public class StringDrill {

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
     * –ü–∞–ª–∏–Ω–¥—Ä–æ–º —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.
     *
     * –ü–æ–¥—Å–∫–∞–∑–∫–∞:
     * - –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
     * - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã.
     * - –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º.
     */
    public boolean isPalindrome(String input) {
        if (input == null) return false;

        // –®–∞–≥ 1: –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        String normalized = input.toLowerCase().replaceAll("\\s+", "");

        // –®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
        String reversed = new StringBuilder(normalized).reverse().toString();

        // –®–∞–≥ 3: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        return normalized.equals(reversed);
    }

    /**
     * ‚úÖ –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ —Å–∏–º–≤–æ–ª '–™'.
     *
     * –ü–æ–¥—Å–∫–∞–∑–∫–∞:
     * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: (?i)[aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è]
     * - (?i) –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.
     * - replaceAll –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö.
     */
    public String replaceVowels(String input) {
        if (input == null) return null;

        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –™ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–ª–∞—Å–Ω—ã–µ)
        return input.replaceAll("(?i)[aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è]", "–™");
    }

    /**
     * ‚úÖ –î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å—Ç—Ä–æ—á–Ω—ã–º–∏.
     *
     * –ü–æ–¥—Å–∫–∞–∑–∫–∞:
     * - –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–æ–±–µ–ª—É.
     * - –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å—Ç—Ä–æ—á–Ω—ã–µ.
     * - –°–æ–µ–¥–∏–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ.
     */
    public String capitalizeWords(String sentence) {
        if (sentence == null || sentence.isEmpty()) {
            return sentence;
        }

        // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
        String[] words = sentence.toLowerCase().split(" ");
        StringBuilder capitalized = new StringBuilder();

        for (String word : words) {
            if (!word.isEmpty()) {
                // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Å—Ç—Ä–æ—á–Ω–æ–µ
                capitalized.append(Character.toUpperCase(word.charAt(0)))
                        .append(word.substring(1))
                        .append(" ");
            }
        }

        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ
        return capitalized.toString().trim();
    }

    /**
     * ‚úÖ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
     *
     * –ü–æ–¥—Å–∫–∞–∑–∫–∞:
     * - –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∏—Å–∫–æ–º–æ–µ —Å–ª–æ–≤–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
     * - –†–∞–∑–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–æ–±–µ–ª—É.
     * - –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∏—Å–∫–æ–º—ã–º.
     */
    public int countWordOccurrences(String sentence, String word) {
        if (sentence == null || word == null || sentence.isEmpty() || word.isEmpty()) {
            return 0;
        }

        // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        String[] words = sentence.toLowerCase().split("\\s+");
        String target = word.toLowerCase();

        int count = 0;
        for (String w : words) {
            if (w.equals(target)) {
                count++;
            }
        }

        return count;
    }

    /**
     * üîç –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤
     */
    public static void main(String[] args) {
        StringDrill drill = new StringDrill();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º isPalindrome
        System.out.println(drill.isPalindrome("Racecar"));                // true
        System.out.println(drill.isPalindrome("A man a plan a canal Panama")); // true
        System.out.println(drill.isPalindrome("Hello"));                 // false

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º replaceVowels
        System.out.println(drill.replaceVowels("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"));    // –ü—Ä–™–≤–™—Ç, –∫–™–∫ –¥–™–ª–™?
        System.out.println(drill.replaceVowels("Hello World"));          // H–™ll–™ W–™rld

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º capitalizeWords
        System.out.println(drill.capitalizeWords("java IS fun"));        // Java Is Fun
        System.out.println(drill.capitalizeWords("  hello   world  "));  // Hello World

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º countWordOccurrences
        System.out.println(drill.countWordOccurrences("Java is fun and java is powerful", "java")); // 2
        System.out.println(drill.countWordOccurrences("hello Hello hElLo", "hello"));               // 3
    }
}
